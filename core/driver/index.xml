<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Drivers on MongoDB Node.js Core Driver</title>
    <link>/node-mongodb-native/core/driver/</link>
    <description>Recent content in Drivers on MongoDB Node.js Core Driver</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 19 Mar 2015 14:27:51 -0400</lastBuildDate>
    
	<atom:link href="/node-mongodb-native/core/driver/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Management</title>
      <link>/node-mongodb-native/core/driver/reference/management/</link>
      <pubDate>Thu, 19 Mar 2015 14:27:51 -0400</pubDate>
      
      <guid>/node-mongodb-native/core/driver/reference/management/</guid>
      <description> Management The driver provides a logging mechanism:
 Logging: Comprehensive logging of all operations.  </description>
    </item>
    
    <item>
      <title>CRUD Operations</title>
      <link>/node-mongodb-native/core/driver/reference/crud/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:30 -0400</pubDate>
      
      <guid>/node-mongodb-native/core/driver/reference/crud/</guid>
      <description>CRUD The Core Driver CRUD operations are defined by the methods available on the driver topologies in the form of the insert, update, remove, cursor and command.
Inserting Documents Inserting documents is fairly straightforward. Let&amp;rsquo;s look at an example.
var Server = require(&#39;mongodb-core&#39;).Server , assert = require(&#39;assert&#39;); var server = new Server({host: &#39;localhost&#39;, port: 27017}); // Wait for the connection event server.on(&#39;connect&#39;, function(server) { // Execute the insert server.insert(&#39;integration_tests.inserts_example1&#39;, [{a:1}], { writeConcern: {w:1}, ordered:true }, function(err, results) { assert.</description>
    </item>
    
    <item>
      <title>Connecting</title>
      <link>/node-mongodb-native/core/driver/reference/connecting/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:30 -0400</pubDate>
      
      <guid>/node-mongodb-native/core/driver/reference/connecting/</guid>
      <description> Connecting The reference documentation for connecting to a MongoDB server deployment is divided into three sections:
 Connection Settings: documentation of the ways to specify authentication credentials  </description>
    </item>
    
    <item>
      <title>Connection Settings</title>
      <link>/node-mongodb-native/core/driver/reference/connecting/connection-settings/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:30 -0400</pubDate>
      
      <guid>/node-mongodb-native/core/driver/reference/connecting/connection-settings/</guid>
      <description>Connecting To MongoDB Connecting to MongoDB using the driver is done using the Topology classes Server, ReplSet and Mongos. There is no auto detection of the server topology as this is a low level driver.
Single Server Connection We have a single MongoDB server instance running on the port 27017 Let&amp;rsquo;s connect using the driver and MongoClient.connect
var Server = require(&#39;mongodb-core&#39;).Server , assert = require(&#39;assert&#39;); var server = new Server({host: &#39;localhost&#39;, port: 27017}); // Wait for the connection event server.</description>
    </item>
    
    <item>
      <title>Extending Cursors</title>
      <link>/node-mongodb-native/core/driver/reference/extending/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:30 -0400</pubDate>
      
      <guid>/node-mongodb-native/core/driver/reference/extending/</guid>
      <description>Extending the functionality of the Driver Cursor The Core Driver cursor is a very minimalist cursor by design and only supports a single next method to iterate over the query results. In this tutorial we will examine how we can extend the cursor to support an additional toArray method and show how we can configure our topology to always return the new extended Cursor on all cursor method calls.</description>
    </item>
    
    <item>
      <title>Pool Design</title>
      <link>/node-mongodb-native/core/driver/reference/pool/</link>
      <pubDate>Thu, 19 Mar 2015 12:53:30 -0400</pubDate>
      
      <guid>/node-mongodb-native/core/driver/reference/pool/</guid>
      <description>Driver Pool Design The 2.0 series of the mongodb-core module introduces a newly re-designed pool that will grow and contract based on the usage pattern. This reference outlines how the growing/shrinking of the pool works, how authentication is handled and how operations are executed.
Operations are executed using a work-queue. That means the Pool is responsible for scheduling the execution of operations on connections. The benefit of this is that one avoids slow operations holding up fast operations as long as the following holds true.</description>
    </item>
    
    <item>
      <title>Logging</title>
      <link>/node-mongodb-native/core/driver/reference/management/logging/</link>
      <pubDate>Wed, 18 Mar 2015 21:14:20 -0400</pubDate>
      
      <guid>/node-mongodb-native/core/driver/reference/management/logging/</guid>
      <description>Logging The driver lets you log at 3 different levels. These are debug, info and error. By default the log level is at error. You can change the level, only allow specific classes to log and provide your own logger implementation. Let&amp;rsquo;s look at how we control the log level.
Setting Log level Setting the log level is pretty easy. Let&amp;rsquo;s look at example of adjusting it for our application only logging the Db class.</description>
    </item>
    
    <item>
      <title>Getting Started</title>
      <link>/node-mongodb-native/core/driver/getting-started/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/node-mongodb-native/core/driver/getting-started/</guid>
      <description> Getting Started To help you get started quickly on the new driver, follow:
 Installation Quick Tour   </description>
    </item>
    
    <item>
      <title>Installation Guide</title>
      <link>/node-mongodb-native/core/driver/getting-started/installation-guide/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/node-mongodb-native/core/driver/getting-started/installation-guide/</guid>
      <description>Installation The recommended way to get started using the Node.js Core driver is by using the NPM (Node Package Manager) to install the dependency in your project.
MongoDB Core Driver Given that you have created your own project using npm init we install the mongodb driver and it&amp;rsquo;s dependencies by executing the following NPM command.
npm install mongodb-core --save  This will download the MongoDB Core driver and add a dependency entry in your package.</description>
    </item>
    
    <item>
      <title>MongoDB Core</title>
      <link>/node-mongodb-native/core/driver/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/node-mongodb-native/core/driver/</guid>
      <description>MongoDB Driver Core Documentation Welcome to the MongoDB Core Driver documentation hub.
What&amp;rsquo;s New in 2.0 The What&amp;rsquo;s New guide explains the major new features of the driver.
Getting Started The Getting Started guide contains installation instructions and a simple tutorial to get up and running quickly.
Reference For more detailed documentation, see the Reference guide.</description>
    </item>
    
    <item>
      <title>Quick Tour</title>
      <link>/node-mongodb-native/core/driver/getting-started/quick-tour/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/node-mongodb-native/core/driver/getting-started/quick-tour/</guid>
      <description>QuickStart The quick start guide will show you how to set up a simple application using Core driver and MongoDB. It scope is only how to set up the driver and perform the simple crud operations. For more inn depth coverage we encourage reading the tutorials.
Create the package.json file Let&amp;rsquo;s create a directory where our application will live. In our case we will put this under our projects directory.</description>
    </item>
    
    <item>
      <title>Reference</title>
      <link>/node-mongodb-native/core/driver/reference/</link>
      <pubDate>Tue, 17 Mar 2015 15:36:56 +0000</pubDate>
      
      <guid>/node-mongodb-native/core/driver/reference/</guid>
      <description> Reference  Connecting: Documentation of the driver&amp;rsquo;s support for connecting to MongoDB servers CRUD: Documentation of the driver&amp;rsquo;s support for CRUD operations Management: Documentation of the driver&amp;rsquo;s support for logging and monitoring of its internal state  </description>
    </item>
    
  </channel>
</rss>