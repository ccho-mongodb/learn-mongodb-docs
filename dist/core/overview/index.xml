<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Overviews on MongoDB Core 1.0.0 </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>/learn-mongodb-docs/core/overview/index.xml/</link>
    
    
    
    <updated>Mon, 01 Jul 2013 00:00:00 UTC</updated>
    
    <item>
      <title>Driver introduction</title>
      <link>/learn-mongodb-docs/core/overview/introduction/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 UTC</pubDate>
      
      <guid>/learn-mongodb-docs/core/overview/introduction/</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;What is MongoDB Core&lt;/h2&gt;

&lt;p&gt;The MongoDB core driver is the minimal viable driver and contains no abstractions of any kind. It&amp;rsquo;s the basis on what the 2.X or higher driver builds on.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Who would use this ?&lt;/h2&gt;

&lt;p&gt;The target audience of this module are developers building higher level abstractions like ODM&amp;rsquo;s, queue managers, caches and others where the additional layers of abstraction and helpers in the main driver is not needed. The lack of all of these abstractions should also help if you are trying to implement your own driver in another language or plan to write your own specialized MongoDB Node.js driver.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Next Steps&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/overview/installing&#34;&gt;Install Driver&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/overview/quickstart&#34;&gt;Quick start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;/community/mailing-list&#34;&gt;Join the Mailing List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/christkv/mongodb-core&#34;&gt;Star us on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Installing The Driver</title>
      <link>/learn-mongodb-docs/core/overview/installing/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 UTC</pubDate>
      
      <guid>/learn-mongodb-docs/core/overview/installing/</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Installing The MongoDB Core driver using NPM&lt;/h2&gt;

&lt;p&gt;Installing the MongoDB Core driver using NPM is very easy. First you need to ensure you have Node.js and NPM correctly set up and in your path. Installing the driver is as easy as.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install mongodb-core
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Installing MongoDB Core driver as part of your project&lt;/h2&gt;

&lt;p&gt;Setting up the Node.js driver for your project is a simple as adding it to the &lt;strong&gt;package.json&lt;/strong&gt; dependencies section. An example &lt;strong&gt;package.json&lt;/strong&gt; file is shown below.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;myproject&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;My first project&amp;quot;,
  &amp;quot;main&amp;quot;: &amp;quot;index.js&amp;quot;,
  &amp;quot;repository&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;git&amp;quot;,
    &amp;quot;url&amp;quot;: &amp;quot;git://github.com/christkv/myfirstproject.git&amp;quot;
  },
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;mongodb-core&amp;quot;: &amp;quot;~1.0&amp;quot;
  },
  &amp;quot;author&amp;quot;: &amp;quot;Christian Kvalheim&amp;quot;,
  &amp;quot;license&amp;quot;: &amp;quot;Apache 2.0&amp;quot;,
  &amp;quot;bugs&amp;quot;: {
    &amp;quot;url&amp;quot;: &amp;quot;https://github.com/christkv/myfirstproject/issues&amp;quot;
  },
  &amp;quot;homepage&amp;quot;: &amp;quot;https://github.com/christkv/myfirstproject&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To install the dependency all you need is to open a shell or command line, move to the directory where the package.json file is located and type.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will download all the dependencies.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>QuickStart</title>
      <link>/learn-mongodb-docs/core/overview/quickstart/</link>
      <pubDate>Mon, 01 Jul 2013 00:00:00 UTC</pubDate>
      
      <guid>/learn-mongodb-docs/core/overview/quickstart/</guid>
      <description>

&lt;h1 id=&#34;toc_0&#34;&gt;QuickStart&lt;/h1&gt;

&lt;p&gt;The quickstart guide will show you how to set up a simple application using Core driver and MongoDB. It scope is only how to set up the driver and perform the simple crud operations. For more inn depth coverage we encourage reading the tutorials.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Create the package.json file&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s create a directory where our application will live. In our case we will put this under our projects directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir myproject
cd myproject
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Create a &lt;strong&gt;package.json&lt;/strong&gt; using your favorite text editor and fill it in.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{
  &amp;quot;name&amp;quot;: &amp;quot;myproject&amp;quot;,
  &amp;quot;version&amp;quot;: &amp;quot;1.0.0&amp;quot;,
  &amp;quot;description&amp;quot;: &amp;quot;My first project&amp;quot;,
  &amp;quot;main&amp;quot;: &amp;quot;index.js&amp;quot;,
  &amp;quot;repository&amp;quot;: {
    &amp;quot;type&amp;quot;: &amp;quot;git&amp;quot;,
    &amp;quot;url&amp;quot;: &amp;quot;git://github.com/christkv/myfirstproject.git&amp;quot;
  },
  &amp;quot;dependencies&amp;quot;: {
    &amp;quot;mongodb-core&amp;quot;: &amp;quot;~1.0&amp;quot;
  },
  &amp;quot;author&amp;quot;: &amp;quot;Christian Kvalheim&amp;quot;,
  &amp;quot;license&amp;quot;: &amp;quot;Apache 2.0&amp;quot;,
  &amp;quot;bugs&amp;quot;: {
    &amp;quot;url&amp;quot;: &amp;quot;https://github.com/christkv/myfirstproject/issues&amp;quot;
  },
  &amp;quot;homepage&amp;quot;: &amp;quot;https://github.com/christkv/myfirstproject&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save the file and return to the shell or command prompt and use &lt;strong&gt;NPM&lt;/strong&gt; to install all the dependencies.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see &lt;strong&gt;NPM&lt;/strong&gt; download a lot of files. Once it&amp;rsquo;s done you&amp;rsquo;ll find all the downloaded packages under the &lt;strong&gt;node_modules&lt;/strong&gt; directory.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Booting up a MongoDB Server&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s boot up a MongoDB server instance. Download the right MongoDB version from &lt;a href=&#34;http://www.mongodb.org&#34;&gt;MongoDB&lt;/a&gt;, open a new shell or command line and ensure the &lt;strong&gt;mongod&lt;/strong&gt; command is in the shell or command line path. Now let&amp;rsquo;s create a database directory (in our case under &lt;strong&gt;/data&lt;/strong&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mongod --dbpath=/data --port 27017
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see the &lt;strong&gt;mongod&lt;/strong&gt; process start up and print some status information.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Connecting to MongoDB&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s create a new &lt;strong&gt;app.js&lt;/strong&gt; file that we will use to show the basic CRUD operations using the MongoDB driver.&lt;/p&gt;

&lt;p&gt;First let&amp;rsquo;s add code to connect to the server. Notice that there is no concept of a database here and we use the topology directly to perform the connection.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var Server = require(&#39;mongodb-core&#39;).Server
  , assert = require(&#39;assert&#39;);

// Set up server connection
var server = new Server({
    host: &#39;localhost&#39;
  , port: 27017
  , reconnect: true
  , reconnectInterval: 50
});

// Add event listeners
server.on(&#39;connect&#39;, function(_server) {
  console.log(&#39;connected&#39;);
  test.done();
});

server.on(&#39;close&#39;, function() {
  console.log(&#39;closed&#39;);
});

server.on(&#39;reconnect&#39;, function() {
  console.log(&#39;reconnect&#39;);
});

// Start connection
server.connect();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To connect to a replicaset we would use the &lt;code&gt;ReplSet&lt;/code&gt; class and for a set of Mongos proxies we use the &lt;code&gt;Mongos&lt;/code&gt; class. Each topology class offer the same CRUD operations and you operate on the topology directly. Let&amp;rsquo;s look at an example exercising all the different available CRUD operations.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var Server = require(&#39;mongodb-core&#39;).Server
  , assert = require(&#39;assert&#39;);

// Set up server connection
var server = new Server({
    host: &#39;localhost&#39;
  , port: 27017
  , reconnect: true
  , reconnectInterval: 50
});

// Add event listeners
server.on(&#39;connect&#39;, function(_server) {
  console.log(&#39;connected&#39;);

  // Execute the ismaster command
  _server.command(&#39;system.$cmd&#39;, {ismaster: true}, function(err, result) {

    // Perform a document insert
    _server.insert(&#39;myproject.inserts1&#39;, [{a:1}, {a:2}], {
      writeConcern: {w:1}, ordered:true
    }, function(err, results) {
      assert.equal(null, err);
      assert.equal(2, results.result.n);      

      // Perform a document update
      _server.update(&#39;myproject.inserts1&#39;, [{
        q: {a: 1}, u: {&#39;$set&#39;: {b:1}}
      }], {
        writeConcern: {w:1}, ordered:true
      }, function(err, results) {
        assert.equal(null, err);
        assert.equal(1, results.result.n);

        // Remove a document
        _server.remove(&#39;myproject.inserts1&#39;, [{
          q: {a: 1}, limit: 1
        }], {
          writeConcern: {w:1}, ordered:true
        }, function(err, results) {
          assert.equal(null, err);
          assert.equal(1, results.result.n);

          // Get a document
          var cursor = _server.cursor(&#39;integration_tests.inserts_example4&#39;, {
              find: &#39;integration_tests.example4&#39;
            , query: {a:1}
          });

          // Get the first document
          cursor.next(function(err, doc) {
            assert.equal(null, err);
            assert.equal(2, doc.a);

            // Execute the ismaster command
            _server.command(&amp;quot;system.$cmd&amp;quot;
              , {ismaster: true}, function(err, result) {
                assert.equal(null, err)
                _server.destroy();              
            });
          });
      });
    });

    test.done();
  });
});

server.on(&#39;close&#39;, function() {
  console.log(&#39;closed&#39;);
});

server.on(&#39;reconnect&#39;, function() {
  console.log(&#39;reconnect&#39;);
});

// Start connection
server.connect();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The core driver does not contain any helpers or abstractions only the core crud operations. These consist of the following commands.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;insert&lt;/code&gt;, Insert takes an array of 1 or more documents to be inserted against the topology and allows you to specify a write concern and if you wish to execute the inserts in order or out of order.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;update&lt;/code&gt;, Update takes an array of 1 or more update commands to be executed against the server topology and also allows you to specify a write concern and if you wish to execute the updates in order or out of order.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;remove&lt;/code&gt;, Remove takes an array of 1 or more remove commands to be executed against the server topology and also allows you to specify a write concern and if you wish to execute the removes in order or out of order.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cursor&lt;/code&gt;, Returns you a cursor for either the &amp;lsquo;virtual&amp;rsquo; &lt;code&gt;find&lt;/code&gt; command, a command that returns a cursor id or a plain cursor id. Read the cursor tutorial for more inn depth coverage.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;command&lt;/code&gt;, Executes a command against MongoDB and returns the result.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auth&lt;/code&gt;, Authenticates the current topology using a supported authentication scheme.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Core Driver is a building block for library builders and is not meant for usage by end users as it lacks a lot of features the end user might need such as automatic buffering of operations when a primary is changing in a replicaset or the db and collections abstraction.&lt;/p&gt;

&lt;h2 id=&#34;toc_4&#34;&gt;Next steps&lt;/h2&gt;

&lt;p&gt;The next steps is to get more inn depth information about how the different aspects of the core driver works and how to leverage them to extend the functionality of the cursors. Please view the tutorials for more detailed information.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>